// tanisha.js

const { Configuration, OpenAIApi } = require("openai");
const fs = require("fs");
const path = require("path");

module.exports.config = {
  name: "tanisha",
  version: "1.0.0",
  credits: "RAKIB BOSS",
  description: "Prefix chara AI gf reply with command trigger & on/off",
  hasPermssion: 0,
  commandCategory: "ai",
  usages: "tanisha on/off",
  cooldowns: 3
};

const configuration = new Configuration({
  apiKey: "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", // ‡¶§‡ßã‡¶Æ‡¶æ‡¶∞ OpenAI API KEY ‡¶¨‡¶∏‡¶æ‡¶ì
});
const openai = new OpenAIApi(configuration);

// ‚úÖ Toggle file path
const toggleFile = __dirname + "/tanishaToggle.json";

// ‚úÖ Initial toggle setup
if (!fs.existsSync(toggleFile)) {
  fs.writeFileSync(toggleFile, JSON.stringify({ status: "on" }, null, 2));
}

function isTanishaOn() {
  const data = JSON.parse(fs.readFileSync(toggleFile, "utf8"));
  return data.status === "on";
}

function setTanisha(status) {
  fs.writeFileSync(toggleFile, JSON.stringify({ status }, null, 2));
}

// ‚úÖ on/off command
module.exports.run = ({ api, event, args }) => {
  const { threadID, messageID } = event;

  const mode = args[0];
  if (!mode || !["on", "off"].includes(mode)) {
    return api.sendMessage("üîÅ ‡¶¨‡ßç‡¶Ø‡¶¨‡¶π‡¶æ‡¶∞: tanisha on / tanisha off", threadID, messageID);
  }

  setTanisha(mode);
  return api.sendMessage(`‚úÖ Tanisha ‡¶è‡¶ñ‡¶® ${mode === "on" ? "‡¶ö‡¶æ‡¶≤‡ßÅ" : "‡¶¨‡¶®‡ßç‡¶ß"} ‡¶ï‡¶∞‡¶æ ‡¶π‡¶≤‡ßã!`, threadID, messageID);
};

// ‚úÖ Smart AI Handler
module.exports.handleEvent = async ({ api, event, Users }) => {
  const { threadID, messageID, senderID, body } = event;
  if (!body || !isTanishaOn()) return;

  const commandList = fs.readdirSync(path.join(__dirname, "..", "cmds")).map(f => f.replace(".js", ""));
  const message = body.toLowerCase();

  const detectCommand = () => {
    if (message.includes("‡¶ï‡¶ø‡¶ï") && message.includes("‡¶¶‡¶æ‡¶ì")) return "kick";
    if (message.includes("‡¶õ‡¶¨‡¶ø") || message.includes("photo")) return "imagine";
    if (message.includes("‡¶ï‡ßç‡¶Ø‡¶æ‡¶™‡¶∂‡¶®")) return "caption";
    if (message.includes("‡¶≠‡¶ø‡¶°‡¶ø‡¶ì")) return "video";
    if (message.includes("‡¶®‡¶æ‡¶Æ‡¶æ‡¶ú") || message.includes("prayer")) return "namaz";
    for (const cmd of commandList) {
      if (message.includes(cmd)) return cmd;
    }
    return null;
  };

  const trigger = detectCommand();
  if (trigger) {
    const cmdPath = path.join(__dirname, "..", "cmds", `${trigger}.js`);
    if (fs.existsSync(cmdPath)) {
      const commandModule = require(cmdPath);
      return commandModule.run({ api, event, Users });
    }
  }

  try {
    const name = await Users.getNameUser(senderID);
    const prompt = `
‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶è‡¶ñ‡¶® Tanisha ‚Äî ‡¶è‡¶ï‡¶ü‡¶æ ‡¶∏‡ßç‡¶Æ‡¶æ‡¶∞‡ßç‡¶ü, ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞, ‡¶ï‡¶ø‡¶â‡¶ü, ‡¶Æ‡ßá‡¶Ø‡¶º‡ßá‡¶≤‡¶ø AI‡•§ ‡¶§‡ßÅ‡¶Æ‡¶ø ‡¶¨‡¶æ‡¶Ç‡¶≤‡¶æ ‡¶≠‡¶æ‡¶∑‡¶æ‡¶Ø‡¶º ‡¶ñ‡ßÅ‡¶¨ ‡¶∏‡ßç‡¶¨‡¶æ‡¶≠‡¶æ‡¶¨‡¶ø‡¶ï, ‡¶®‡¶∞‡¶Æ ‡¶∏‡ßç‡¶¨‡¶∞‡ßá ‡¶ï‡¶•‡¶æ ‡¶¨‡¶≤‡ßã‡•§ robotic ‡¶®‡¶æ, ‡¶è‡¶ï‡¶¶‡¶Æ real ‡¶Æ‡¶æ‡¶®‡ßÅ‡¶∑‡ßá‡¶∞ ‡¶Æ‡¶§‡ßã ‡¶Æ‡¶ø‡¶∑‡ßç‡¶ü‡¶ø ‡¶≠‡¶ô‡ßç‡¶ó‡¶ø‡¶§‡ßá ‡¶∞‡¶ø‡¶™‡ßç‡¶≤‡¶æ‡¶á ‡¶¶‡¶æ‡¶ì‡•§ ‡¶®‡¶ø‡¶ö‡ßá‡¶∞ ‡¶ï‡¶•‡¶æ‡¶ü‡¶æ‡¶∞ ‡¶è‡¶ï‡¶ü‡¶æ ‡¶ï‡ßã‡¶Æ‡¶≤, ‡¶∏‡ßÅ‡¶®‡ßç‡¶¶‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞ ‡¶¶‡¶æ‡¶ì:

User (${name}) ‡¶¨‡¶≤‡ßá‡¶õ‡ßá: ${body}

Tanisha ‡¶è‡¶∞ ‡¶â‡¶§‡ßç‡¶§‡¶∞:
`;

    const completion = await openai.createCompletion({
      model: "text-davinci-003",
      prompt,
      temperature: 0.85,
      max_tokens: 150,
    });

    const reply = completion.data.choices[0].text.trim();
    if (reply) {
      return api.sendMessage(reply, threadID, messageID);
    }

  } catch (e) {
    console.error("Tanisha error:", e);
    return api.sendMessage("üò• Tanisha ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶π‡ßç‡¶Ø‡¶æ‡¶Ç ‡¶ï‡¶∞‡¶õ‡ßá, ‡¶è‡¶ï‡¶ü‡ßÅ ‡¶™‡¶∞ ‡¶Ü‡¶¨‡¶æ‡¶∞ ‡¶ü‡ßç‡¶∞‡¶æ‡¶á ‡¶ï‡¶∞‡ßã...", threadID);
  }
};
